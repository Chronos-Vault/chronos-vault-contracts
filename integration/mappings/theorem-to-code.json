{
  "metadata": {
    "title": "Formal Verification Traceability Matrix",
    "description": "Maps abstract Lean 4 theorems to concrete Certora specifications and Solidity code",
    "version": "1.0.0",
    "lastUpdated": "2025-10-11"
  },
  "mappings": [
    {
      "theoremId": "1",
      "theoremName": "withdrawal_safety",
      "leanFile": "formal-proofs/Contracts/ChronosVault.lean",
      "leanLine": 23,
      "certorRule": "nonOwnerCannotWithdrawBeforeUnlock",
      "certoraFile": "certora/specs/ChronosVault.spec",
      "certoraLine": 58,
      "solidityContract": "ChronosVault.sol",
      "solidityFunction": "withdraw",
      "solidityLines": [245, 280],
      "description": "Only vault owner can withdraw funds after time-lock expires",
      "status": "PROVEN"
    },
    {
      "theoremId": "2",
      "theoremName": "balance_integrity",
      "leanFile": "formal-proofs/Contracts/ChronosVault.lean",
      "leanLine": 29,
      "certoraInvariant": "totalAssetsConservation",
      "certoraFile": "certora/specs/ChronosVault.spec",
      "certoraLine": 165,
      "solidityContract": "ChronosVault.sol",
      "solidityFunction": "totalAssets",
      "solidityLines": [650, 670],
      "description": "Vault balance can never become negative",
      "status": "PROVEN"
    },
    {
      "theoremId": "3",
      "theoremName": "timelock_enforcement",
      "leanFile": "formal-proofs/Contracts/ChronosVault.lean",
      "leanLine": 35,
      "certoraRule": "ownerCannotBypassTimelock",
      "certoraFile": "certora/specs/ChronosVault.spec",
      "certoraLine": 73,
      "solidityContract": "ChronosVault.sol",
      "solidityModifier": "onlyWhenUnlocked",
      "solidityLines": [225, 240],
      "description": "Time-locks cannot be bypassed, even by owner - 'TRUST MATH, NOT HUMANS'",
      "status": "PROVEN"
    },
    {
      "theoremId": "4",
      "theoremName": "no_reentrancy",
      "leanFile": "formal-proofs/Contracts/ChronosVault.lean",
      "leanLine": 41,
      "certoraRule": "noReentrancy",
      "certoraFile": "certora/specs/ChronosVault.spec",
      "certoraLine": 139,
      "solidityContract": "ChronosVault.sol",
      "solidityModifier": "nonReentrant",
      "solidityInheritance": "ReentrancyGuard",
      "description": "Reentrancy attacks are mathematically impossible",
      "status": "PROVEN"
    },
    {
      "theoremId": "5",
      "theoremName": "ownership_immutable",
      "leanFile": "formal-proofs/Contracts/ChronosVault.lean",
      "leanLine": 47,
      "certoraInvariant": "ownershipImmutable",
      "certoraFile": "certora/specs/ChronosVault.spec",
      "certoraLine": 192,
      "solidityContract": "ChronosVault.sol",
      "solidityInheritance": "Ownable",
      "description": "Vault ownership cannot be changed after creation",
      "status": "PROVEN"
    },
    {
      "theoremId": "6",
      "theoremName": "supply_conservation",
      "leanFile": "formal-proofs/Contracts/CVTBridge.lean",
      "leanLine": 23,
      "certoraInvariant": "totalSupplyConserved",
      "certoraFile": "certora/specs/CVTBridgeV3.spec",
      "certoraLine": 48,
      "solidityContract": "CVTBridgeV3.sol",
      "solidityFunction": "initiateBridge",
      "solidityLines": [200, 250],
      "description": "Cross-chain transfers never create or destroy tokens",
      "status": "PROVEN"
    },
    {
      "theoremId": "7",
      "theoremName": "no_double_spending",
      "leanFile": "formal-proofs/Contracts/CVTBridge.lean",
      "leanLine": 29,
      "certoraRule": "noDoubleSpend",
      "certoraFile": "certora/specs/CVTBridgeV3.spec",
      "certoraLine": 99,
      "solidityContract": "CVTBridgeV3.sol",
      "solidityMapping": "processedBridges",
      "solidityLines": [96, 96],
      "description": "Each bridge nonce can only be processed once",
      "status": "PROVEN"
    },
    {
      "theoremId": "8",
      "theoremName": "atomic_swap",
      "leanFile": "formal-proofs/Contracts/CVTBridge.lean",
      "leanLine": 35,
      "certoraRule": "bridgeCompletionConservesTokens",
      "certoraFile": "certora/specs/CVTBridgeV3.spec",
      "certoraLine": 71,
      "solidityContract": "CVTBridgeV3.sol",
      "solidityFunction": "completeBridge",
      "solidityLines": [280, 350],
      "description": "Bridge operations are atomic - all or nothing",
      "status": "PROVEN"
    },
    {
      "theoremId": "9",
      "theoremName": "balance_consistency",
      "leanFile": "formal-proofs/Contracts/CVTBridge.lean",
      "leanLine": 41,
      "certoraRule": "bridgePreserveSupply",
      "certoraFile": "certora/specs/CVTBridgeV3.spec",
      "certoraLine": 56,
      "solidityContract": "CVTBridgeV3.sol",
      "description": "Sum of locked tokens never exceeds total supply",
      "status": "PROVEN"
    },
    {
      "theoremId": "10",
      "theoremName": "htlc_exclusivity",
      "leanFile": "formal-proofs/Contracts/CrossChainBridge.lean",
      "leanLine": 23,
      "certoraInvariant": "operationExclusivity",
      "certoraFile": "certora/specs/CrossChainBridgeV3.spec",
      "certoraLine": 79,
      "solidityContract": "CrossChainBridgeV3.sol",
      "solidityEnum": "OperationStatus",
      "description": "An operation can be completed OR canceled, never both",
      "status": "PROVEN"
    },
    {
      "theoremId": "11",
      "theoremName": "claim_correctness",
      "leanFile": "formal-proofs/Contracts/CrossChainBridge.lean",
      "leanLine": 29,
      "certoraRule": "proofRequiredForCompletion",
      "certoraFile": "certora/specs/CrossChainBridgeV3.spec",
      "certoraLine": 109,
      "solidityContract": "CrossChainBridgeV3.sol",
      "solidityFunction": "submitProof",
      "solidityLines": [180, 220],
      "description": "Valid cryptographic proof required to complete operation",
      "status": "PROVEN"
    },
    {
      "theoremId": "12",
      "theoremName": "refund_safety",
      "leanFile": "formal-proofs/Contracts/CrossChainBridge.lean",
      "leanLine": 35,
      "certoraRule": "operationTimeout",
      "certoraFile": "certora/specs/CrossChainBridgeV3.spec",
      "certoraLine": 153,
      "solidityContract": "CrossChainBridgeV3.sol",
      "solidityFunction": "cancelOperation",
      "solidityLines": [240, 260],
      "description": "Operations can be canceled only after timeout by sender",
      "status": "PROVEN"
    },
    {
      "theoremId": "24",
      "theoremName": "two_of_three_consensus",
      "leanFile": "formal-proofs/Consensus/TrinityProtocol.lean",
      "leanLine": 28,
      "certoraInvariant": "trinityProtocolConsensus",
      "certoraFile": "certora/specs/CrossChainBridgeV3.spec",
      "certoraLine": 33,
      "tlaProperty": "TwoOfThreeConsensus",
      "tlaFile": "tlaplus/specs/TrinityProtocol.tla",
      "tlaLine": 125,
      "solidityContract": "CrossChainBridgeV3.sol",
      "solidityConstant": "REQUIRED_CHAIN_CONFIRMATIONS",
      "solidityLines": [46, 46],
      "description": "Operations approved only with 2 of 3 chain confirmations",
      "status": "PROVEN"
    },
    {
      "theoremId": "25",
      "theoremName": "byzantine_fault_tolerance",
      "leanFile": "formal-proofs/Consensus/TrinityProtocol.lean",
      "leanLine": 39,
      "certoraRule": "byzantineFaultTolerance",
      "certoraFile": "certora/specs/CrossChainBridgeV3.spec",
      "certoraLine": 57,
      "tlaProperty": "ByzantineFaultTolerance",
      "tlaFile": "tlaplus/specs/TrinityProtocol.tla",
      "tlaLine": 135,
      "description": "System remains secure even if 1 chain is compromised",
      "status": "PROVEN"
    },
    {
      "theoremId": "26",
      "theoremName": "no_single_point_failure",
      "leanFile": "formal-proofs/Consensus/TrinityProtocol.lean",
      "leanLine": 50,
      "tlaProperty": "NoSinglePointOfFailure",
      "tlaFile": "tlaplus/specs/TrinityProtocol.tla",
      "tlaLine": 145,
      "description": "No single chain can unilaterally approve or reject operations",
      "status": "PROVEN"
    },
    {
      "theoremId": "27",
      "theoremName": "liveness_under_majority",
      "leanFile": "formal-proofs/Consensus/TrinityProtocol.lean",
      "leanLine": 61,
      "tlaProperty": "LivenessUnderMajority",
      "tlaFile": "tlaplus/specs/TrinityProtocol.tla",
      "tlaLine": 152,
      "description": "System makes progress if 2+ chains are operational",
      "status": "PROVEN"
    },
    {
      "theoremId": "28",
      "theoremName": "attack_resistance",
      "leanFile": "formal-proofs/Consensus/TrinityProtocol.tla",
      "leanLine": 71,
      "tlaProperty": "AttackResistance",
      "tlaFile": "tlaplus/specs/TrinityProtocol.tla",
      "tlaLine": 163,
      "description": "Attack requires compromising 2+ independent blockchains simultaneously",
      "status": "PROVEN"
    }
  ],
  "summary": {
    "totalTheorems": 35,
    "mappedToCode": 18,
    "coveragePercentage": 51,
    "smartContractsCovered": 3,
    "verificationLayers": 3,
    "note": "Remaining 17 theorems cover cryptographic primitives (VDF, MPC, ZK, Quantum) which are verified at the algorithmic level rather than Solidity implementation"
  }
}
